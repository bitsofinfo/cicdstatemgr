
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: event-listener
  annotations:
    tekton.dev/payload-validation: "false"
spec:
  serviceAccountName: tekton-triggers-admin
  resources:
    kubernetesResource:
      serviceType: NodePort
  triggers:

    # --------------------------------------------------
    # Handle Github webhook call from tag push
    # --------------------------------------------------
    - name: start-interceptor
      interceptors:
        - cel:
            filter: >-
              body.ref.indexOf('tags') != -1

        - github:
            secretRef:
              secretName: github-secret
              secretKey: secretToken
            eventTypes:
              - push

        - cel:
            overlays:

              - key: invokedByPrincipalId
                expression: "body.pusher.email"

              - key: gitAppName
                expression: "body.repository.name"

              - key: appTag
                expression: "body.ref.split('/')[2]" # refs/tags/9.9.9-1--1-3 | develop etc

              - key: commitMsg
                expression: "body.head_commit.message"

              - key: commitId
                expression: "body.head_commit.id"

              - key: cloneUrl
                expression: "body.repository.clone_url"


      bindings:
        - ref: start-via-git
      template:
        ref: start


    # --------------------------------------------------
    # Handle BUILD via trigger call (not from slack)
    # --------------------------------------------------
    - name: build-interceptor
      interceptors:
        - cel:
            filter: >-
              header.match('x-cicdstatemgr-autotrigger-key','3ecret1!') &&
              header.match('x-cicdstatemgr-pipeline-name', 'build')

        - cel:
            overlays:
                # @see cicdops.yaml trigger.auto-args
              - key: cicdContextDataId
                expression: "body.cicdContextDataId"
              - key: appName
                expression: "body.appName"
              - key: appTag
                expression: "body.appTag"
              - key: gitAppName
                expression: "body.gitAppName"
              - key: cicdContextName
                expression: "body.cicdContextName"

              # for security checks
              - key: invokerUid
                expression: body.invokerUid
              - key: relatedCicdContextDataId
                expression: body.relatedCicdContextDataId
              - key: relatedPipelineRunUid
                expression: body.relatedPipelineRunUid
              - key: relatedPipelineName
                expression: body.relatedPipelineName
              - key: triggeredBySystem
                expression: body.triggeredBySystem
              - key: triggeredByDescription
                expression: body.triggeredByDescription

      bindings:
        - ref: build
      template:
        ref: build

    # --------------------------------------------------
    # Handle DEPLOY via trigger call (not from slack)
    # --------------------------------------------------
    - name: deploy-interceptor
      interceptors:
        - cel:
            filter: >-
              header.match('x-cicdstatemgr-autotrigger-key','3ecret1!') &&
              header.match('x-cicdstatemgr-pipeline-name', 'deploy')

        - cel:
            overlays:

                # @see cicdops.yaml trigger.auto-args
              - key: cicdContextDataId
                expression: "body.cicdContextDataId"
              - key: appName
                expression: "body.appName"
              - key: appTag
                expression: "body.appTag"
              - key: gitAppName
                expression: "body.gitAppName"
              - key: cicdContextName
                expression: "body.cicdContextName"


                # see actual obtgpipeline.yaml's
              - key: targetAppName
                expression: "body.targetAppName"

              - key: targetAppTag
                expression: "body.targetAppTag"

              # for security checks
              - key: invokerUid
                expression: body.invokerUid
              - key: relatedCicdContextDataId
                expression: body.relatedCicdContextDataId
              - key: relatedPipelineRunUid
                expression: body.relatedPipelineRunUid
              - key: relatedPipelineName
                expression: body.relatedPipelineName
              - key: triggeredBySystem
                expression: body.triggeredBySystem
              - key: triggeredByDescription
                expression: body.triggeredByDescription

      bindings:
        - ref: deploy-via-trigger
      template:
        ref: deploy

    # --------------------------------------------------
    # Handle VALIDATION... validation triggers via simple curl
    # from the pipeline itself
    # --------------------------------------------------
    - name: validate-interceptor
      interceptors:
        - cel:
            filter: >-
              header.match('x-cicdstatemgr-autotrigger-key','3ecret1!') &&
              header.match('x-cicdstatemgr-pipeline-name', 'validate')

        - cel:
            overlays:
                # @see cicdops.yaml trigger.auto-args
              - key: cicdContextDataId
                expression: "body.cicdContextDataId"
              - key: appName
                expression: "body.appName"
              - key: appTag
                expression: "body.appTag"
              - key: gitAppName
                expression: "body.gitAppName"
              - key: cicdContextName
                expression: "body.cicdContextName"

              # for security checks
              - key: invokerUid
                expression: body.invokerUid
              - key: relatedCicdContextDataId
                expression: body.relatedCicdContextDataId
              - key: relatedPipelineRunUid
                expression: body.relatedPipelineRunUid
              - key: relatedPipelineName
                expression: body.relatedPipelineName
              - key: triggeredBySystem
                expression: body.triggeredBySystem
              - key: triggeredByDescription
                expression: body.triggeredByDescription

      bindings:
        - ref: validate
      template:
        ref: validate


    # --------------------------------------------------
    # Handle TEST... test triggers via simple curl
    # --------------------------------------------------
    - name: test-interceptor
      interceptors:
        - cel:
            filter: >-
              header.match('x-cicdstatemgr-autotrigger-key','3ecret1!') &&
              header.match('x-cicdstatemgr-pipeline-name', 'test')

        - cel:
            overlays:

                # @see cicdops.yaml trigger.auto-args
              - key: cicdContextDataId
                expression: "body.cicdContextDataId"
              - key: appName
                expression: "body.appName"
              - key: appTag
                expression: "body.appTag"
              - key: gitAppName
                expression: "body.gitAppName"
              - key: cicdContextName
                expression: "body.cicdContextName"

              # for security checks
              - key: invokerUid
                expression: body.invokerUid
              - key: relatedCicdContextDataId
                expression: body.relatedCicdContextDataId
              - key: relatedPipelineRunUid
                expression: body.relatedPipelineRunUid
              - key: relatedPipelineName
                expression: body.relatedPipelineName
              - key: triggeredBySystem
                expression: body.triggeredBySystem
              - key: triggeredByDescription
                expression: body.triggeredByDescription

      bindings:
        - ref: test
      template:
        ref: test

    # --------------------------------------------------
    # Handle CHANGE CONTEXT... interactions from slack
    # --------------------------------------------------
    - name: slack-change-ctx-interceptor
      interceptors:
        # we need this because slack does a POST w/ body payload=[urlencodedjson]... stupid
        - webhook:
            objectRef:
              kind: Service
              name: slack-payload-handler
              apiVersion: v1
              namespace: tekton-pipelines

        - cel:
            filter: "has(body.api_app_id)"

        - cel:
            filter: >-
              body.token.compareSecret('slack-oauth-token','slack-oauth-token') &&
              has(body.actions) &&
              body.actions[0].value.indexOf('changeContext') != -1

        - cel:
            overlays:
               # action_values[item] are in format:
               # changeContext-[version]-[appName]|[b64 encoded JSON payload]

              - key: targetCicdContextName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().targetCicdContextName"

              - key: gitAppName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().gitAppName"

              - key: relatedCicdContextDataId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedCicdContextDataId"

              - key: relatedPipelineRunUid
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineRunUid"

              - key: relatedPipelineName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineName"

              - key: appName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().appName"

              - key: appTag
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().appTag"

              - key: cicdVersion
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().cicdVersion"

              - key: commitId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().commitId"

              - key: gitCloneUrl
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().gitCloneUrl"

              - key: slackUserFullName
                expression: "body.user.name"

              - key: slackUsername
                expression: "body.user.username"

              - key: slackUserId
                expression: "body.user.id"

              - key: slackChannelId
                expression: "body.channel.id"

              - key: slackMessageTs
                expression: "body.message.ts"

              - key: slackThreadTs
                expression: "body.container.thread_ts"

      bindings:
        - ref: start-via-change-context
      template:
        ref: start



    # --------------------------------------------------
    # Handle DEPLOYs... deploy interactions from slack
    # --------------------------------------------------
    - name: slack-deploy-interceptor
      interceptors:

        # we need this because slack does a POST w/ body payload=[urlencodedjson]... stupid
        - webhook:
            objectRef:
              kind: Service
              name: slack-payload-handler
              apiVersion: v1
              namespace: tekton-pipelines

        - cel:
            filter: "has(body.api_app_id)"

        - cel:
            filter: >-
              body.token.compareSecret('slack-oauth-token','slack-oauth-token') &&
              has(body.actions) &&
              body.actions[0].value.indexOf('deploy') != -1

        - cel:
            overlays:
               # action_values[item] are in format:
               # deploy-[version]-[appName]|[b64 encoded JSON payload]

              - key: cicdContextName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().cicdContextName"

              - key: cicdContextDataId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().cicdContextDataId"

              - key: targetAppName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().targetAppName"

              - key: targetAppTag
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().targetAppTag"

              - key: gitCloneUrl
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().gitCloneUrl"

              - key: relatedCicdContextDataId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedCicdContextDataId"

              - key: relatedPipelineRunUid
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineRunUid"

              - key: relatedPipelineName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineName"

              - key: slackUserFullName
                expression: "body.user.name"

              - key: slackUsername
                expression: "body.user.username"

              - key: slackUserId
                expression: "body.user.id"

              - key: slackChannelId
                expression: "body.channel.id"

              - key: slackMessageTs
                expression: "body.message.ts"

              - key: slackThreadTs
                expression: "body.container.thread_ts"

      bindings:
        - ref: deploy-via-slack
      template:
        ref: deploy


    # --------------------------------------------------
    # Handle TEST... test interactions from slack
    # --------------------------------------------------
    - name: slack-test-interceptor
      interceptors:

        # we need this because slack does a POST w/ body payload=[urlencodedjson]... stupid
        - webhook:
            objectRef:
              kind: Service
              name: slack-payload-handler
              apiVersion: v1
              namespace: tekton-pipelines

        - cel:
            filter: "has(body.api_app_id)"

        - cel:
            filter: >-
              body.token.compareSecret('slack-oauth-token','slack-oauth-token') &&
              has(body.actions) &&
              body.actions[0].value.indexOf('test') != -1

        - cel:
            overlays:
               # action_values[item] are in format:
               # deploy-[version]-[appName]|[b64 encoded JSON payload]

              - key: cicdContextName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().cicdContextName"

              - key: cicdContextDataId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().cicdContextDataId"

              - key: targetAppName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().targetAppName"

              - key: targetAppTag
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().targetAppTag"

              - key: gitCloneUrl
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().gitCloneUrl"

              - key: relatedCicdContextDataId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedCicdContextDataId"

              - key: relatedPipelineRunUid
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineRunUid"

              - key: relatedPipelineName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineName"

              - key: slackUserFullName
                expression: "body.user.name"

              - key: slackUsername
                expression: "body.user.username"

              - key: slackUserId
                expression: "body.user.id"

              - key: slackChannelId
                expression: "body.channel.id"

              - key: slackMessageTs
                expression: "body.message.ts"

              - key: slackThreadTs
                expression: "body.container.thread_ts"

      bindings:
        - ref: test-via-slack
      template:
        ref: test


    # --------------------------------------------------
    # Handle VALIDATE... validate interactions from slack
    # --------------------------------------------------
    - name: slack-validate-interceptor
      interceptors:

        # we need this because slack does a POST w/ body payload=[urlencodedjson]... stupid
        - webhook:
            objectRef:
              kind: Service
              name: slack-payload-handler
              apiVersion: v1
              namespace: tekton-pipelines

        - cel:
            filter: "has(body.api_app_id)"

        - cel:
            filter: >-
              body.token.compareSecret('slack-oauth-token','slack-oauth-token') &&
              has(body.actions) &&
              body.actions[0].value.indexOf('validate') != -1

        - cel:
            overlays:
               # action_values[item] are in format:
               # deploy-[version]-[appName]|[b64 encoded JSON payload]

              - key: cicdContextName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().cicdContextName"

              - key: cicdContextDataId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().cicdContextDataId"

              - key: targetAppName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().targetAppName"

              - key: targetAppTag
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().targetAppTag"

              - key: gitCloneUrl
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().gitCloneUrl"

              - key: relatedCicdContextDataId
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedCicdContextDataId"

              - key: relatedPipelineRunUid
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineRunUid"

              - key: relatedPipelineName
                expression: "string(body.actions[0].value.split('|')[1].decodeb64()).parseJSON().relatedPipelineName"

              - key: slackUserFullName
                expression: "body.user.name"

              - key: slackUsername
                expression: "body.user.username"

              - key: slackUserId
                expression: "body.user.id"

              - key: slackChannelId
                expression: "body.channel.id"

              - key: slackMessageTs
                expression: "body.message.ts"

              - key: slackThreadTs
                expression: "body.container.thread_ts"

      bindings:
        - ref: validate-via-slack
      template:
        ref: validate

    # --------------------------------------------------
    # Handle SLASH COMMAND (/start-app-deploy)... interactions from slack
    #   /start-app-deploy <cicdContextName> <gitCloneUrl> <gitTag>
    # --------------------------------------------------
    - name: slackcmd-startappdeploy-interceptor
      interceptors:
        - webhook:
            objectRef:
              kind: Service
              name: slack-payload-handler
              apiVersion: v1
              namespace: tekton-pipelines

        - cel:
            filter: "has(body.api_app_id)"

        - cel:
            filter: >-
              body.token.compareSecret('slack-oauth-token','slack-oauth-token') &&
              has(body.command) &&
              has(body.text) &&
              body.command.indexOf('start-app-deploy') != -1

        - cel:
            overlays:
              - key: targetCicdContextName
                expression: "body.text.split(' ')[0]"

              - key: gitAppName
                expression: "body.text.split(' ')[1]"

              - key: gitCloneUrl
                expression: "body.text.split(' ')[2]"

              - key: appTag
                expression: "body.text.split(' ')[3]"

              - key: slackUserId
                expression: "body.user_id"

              - key: uniqueString
                expression: "body.trigger_id.split('.')[2]"

      bindings:
        - ref: start-via-cmd-startdeploy
      template:
        ref: start
